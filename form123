import React, { useCallback, useState } from 'react';
import DatePicker from './DatePicker'; // assuming this is the correct import path for your Datepicker component
import FileUploadField from './FileUploadField'; // assuming this is the correct import path for your FileUploadField component
import { Button } from './Button'; // assuming this is the correct import path for your Button component
import Popup from './Popup'; // assuming this is the correct import path for your Popup component
import tick from '../../assets/tick.svg';
import { TEXT_KEYS } from '../../utils/textKeys';
import * as yup from 'yup';
import { yupResolver } from '@hookform/resolvers/yup';
import { useForm } from 'react-hook-form';

const schema = yup.object().shape({
  selectRole: yup.string().required('Please select an option'),
  startDate: yup.string().required('Please select a date'),
  endDate: yup.string().required('Please select a date').test('is-not-same-as-start', 'End date must be different from start date', function(value) {
    const startDate = this.parent.startDate;
    return value !== startDate;
  }),
  selectedFile: yup
    .mixed()
    .when('fileUploaded', {
      is: true,
      then: yup.mixed().required('File is required').test(
        'fileSize',
        'File is too large',
        (value) => value && value.size <= 10485760,
      ),
    }),
});

const PAVForm = () => {
  const {
    register,
    setValue,
    watch,
    handleSubmit,
    control,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(schema),
  });
  const [open, setOpen] = useState(false);
  const selectRole = watch('selectRole');
  const [fileUploaded, setFileUploaded] = useState(false);
  const [progress, setProgress] = useState(0);

  const handleFileUploadProgress = useCallback(() => {
    const interval = setInterval(() => {
      setProgress((prevProgress) => {
        if (prevProgress < 100) {
          return prevProgress + 1;
        } else {
          clearInterval(interval);
          return 100;
        }
      });
    }, 50);
  }, []);

  const isButtonDisabled = progress < 100;

  const onSubmit = (data) => {
    const { startDate, endDate } = data;
    if (startDate === endDate) {
      alert('Start date and end date cannot be the same.');
      return;
    }
    setOpen(true);
  };

  return (
    <div className="text-center justify-center items-center bg-btn_tertiary_hover h-full w-full flex mt-10">
      <form
        onSubmit={handleSubmit(onSubmit)}
        className="bg-vfWhite shadow rounded py-10 px-8 w-[610px] h-auto"
      >
        {/* Your form content */}
        <div className="mt-6">
          <p className="flex justify-start font-VodafoneRg text-sm font-normal text-btn_secondary">
            {TEXT_KEYS.PAVForm.UPLOAD_FILE}
          </p>
          <div className="mt-[-4px]">
            {fileUploaded && (
              <FileUploadField
                name="selectedFile"
                register={register}
                errors={errors}
                showProgress={true}
                startProgress={handleFileUploadProgress}
                progress={progress}
                setValue={setValue}
              />
            )}
            {!fileUploaded && (
              <input
                type="file"
                onChange={(e) => {
                  setValue('selectedFile', e.target.files[0]);
                  setFileUploaded(true);
                }}
                className="border rounded-md px-3 py-2 mt-1 w-full focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
            )}
          </div>
        </div>
        {/* Your form content */}
      </form>
    </div>
  );
};

export default PAVForm;
